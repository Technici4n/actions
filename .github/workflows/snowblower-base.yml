name: Run Snowblower

on:
  workflow_call:
    inputs:
      mc-channel:
        type: string
      branch:
        type: string
      snowblower-version:
        type: string
      snowblower-args:
        type: string
    secrets:
      SNOWLANCE_PRIVATE_KEY:
        required: true

jobs:
  check-mc-version:
    name: Check for new Minecraft version
    runs-on: ubuntu-latest
    outputs:
      is_outdated: ${{ steps.check_match.outputs.result }}
    steps:
      - name: Get Version Manifest
        id: version_manifest
        run: echo "latest_version=$(wget -O - https://piston-meta.mojang.com/mc/game/version_manifest_v2.json | jq -r .latest.${{ inputs.mc-channel }})" >> $GITHUB_OUTPUT
      - name: Generate an Application repository access token
        id: gen_repo_token
        uses: kattecon/gh-app-access-token-gen@v1
        with:
          app_id: 436140
          private_key: ${{ secrets.SNOWLANCE_PRIVATE_KEY }}
          repository: neoforged/snowman
      - name: Get latest branch commit
        id: github_latest
        run: |
          echo "latest_version=$(wget --header 'Authorization: Bearer ${{ steps.gen_repo_token.outputs.token }}' --header 'Accept: application/json' -O - https://api.github.com/repos/neoforged/snowman/commits/${{ inputs.branch }} | jq -r .commit.message)" >> $GITHUB_OUTPUT
      - name: Check match
        id: check_match
        uses: actions/github-script@v6
        env:
          gh: ${{ steps.github_latest.outputs.latest_version }}
          manifest: ${{ steps.version_manifest.outputs.version }}
        with:
          result-encoding: string
          # language=js
          script: |
            'use strict';
            const { gh, manifest } = process.env
            
            console.log(`Latest Minecraft version is: ${manifest}`)
            console.log(`Latest version pushed to GitHub is: ${gh}`)
            console.log(`Versions match: ${gh == manifest}`)
            return gh != manifest
  
  run_blower:
    name: Run SnowBlower
    runs-on: ubuntu-latest
    needs: ["check-mc-version"]
    if: needs.check-mc-version.outputs.is_outdated
    steps:
      - uses: actions/setup-java@v3
        name: Setup Java
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Download SnowBlower
        run: wget https://maven.neoforged.net/releases/net/neoforged/snowblower/${{ inputs.snowblower-version }}/snowblower-${{ inputs.snowblower-version }}-all.jar -O snowblower.jar
      
      - name: Restore caches
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            .snowblower/caches
          key: ${{ runner.os }}-${{ inputs.branch }}-sbcache

      - name: Run snowblower
        timeout-minutes: 300
        run: |
          mkdir sb-output
          java -jar snowblower.jar --output sb-output --branch ${{ inputs.branch }} --committer "snow-lance[bot] 150522644+snow-lance[bot]@users.noreply.github.com" --cache .snowblower/caches --github-app-id 436140 --github-installation-repo neoforged/snowman --push --checkout --remote https://github.com/neoforged/snowman.git --partial-cache --start-over-if-required -Xmx6G ${{ inputs.snowblower-args }}
        env:
          GITHUB_APP_KEY: ${{ secrets.SNOWLANCE_PRIVATE_KEY }}

      - name: Save caches
        id: cache-save
        uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            .snowblower/caches
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}
